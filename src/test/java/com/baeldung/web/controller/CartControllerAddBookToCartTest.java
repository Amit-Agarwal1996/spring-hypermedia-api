// ********RoostGPT********
/*
Test generated by RoostGPT for test javaSpringtestCases using AI Type Open AI and AI Model gpt-4
ROOST_METHOD_HASH=addBookToCart_9ea22dfa75
ROOST_METHOD_SIG_HASH=addBookToCart_b6694f5b0d
Scenario 1: Test to add a valid book to cart
Details:
  TestName: testAddValidBookToCart.
  Description: This test is to verify that a valid book can be added to the cart successfully.
Execution:
  Arrange: Mock the bookRepo to return a valid book when findByIsbn is called. Initialize a valid bookResource with the correct ISBN.
  Act: Call addBookToCart with the valid bookResource as parameter.
  Assert: Assert that the returned CartResource contains the added book.
Validation:
  The assertion verifies that a valid book can be added to the cart. This is important to ensure that users can add books to their cart successfully.
Scenario 2: Test to add an invalid book to cart
Details:
  TestName: testAddInvalidBookToCart.
  Description: This test is to verify that an exception is thrown when trying to add an invalid book to the cart.
Execution:
  Arrange: Mock the bookRepo to return null when findByIsbn is called. Initialize a bookResource with an invalid ISBN.
  Act: Call addBookToCart with the invalid bookResource as parameter.
  Assert: Assert that an exception is thrown.
Validation:
  The assertion verifies that an exception is thrown when trying to add an invalid book to the cart. This is important to ensure that users can only add existing books to their cart.
Scenario 3: Test to add a book to an empty cart
Details:
  TestName: testAddBookToEmptyCart.
  Description: This test is to verify that a book can be added to an empty cart.
Execution:
  Arrange: Mock the bookRepo to return a valid book when findByIsbn is called. Initialize a valid bookResource with the correct ISBN. Create a new empty cart.
  Act: Call addBookToCart with the valid bookResource as parameter.
  Assert: Assert that the returned CartResource contains the added book.
Validation:
  The assertion verifies that a book can be added to an empty cart. This is important to ensure that users can start adding books to their cart even if it's empty.
Scenario 4: Test to add a book to a cart that already contains books
Details:
  TestName: testAddBookToNonEmptyCart.
  Description: This test is to verify that a book can be added to a cart that already contains other books.
Execution:
  Arrange: Mock the bookRepo to return a valid book when findByIsbn is called. Initialize a valid bookResource with the correct ISBN. Create a cart that already contains other books.
  Act: Call addBookToCart with the valid bookResource as parameter.
  Assert: Assert that the returned CartResource contains the added book along with the already present books.
Validation:
  The assertion verifies that a book can be added to a cart that already contains other books. This is important to ensure that users can add multiple books to their cart.
*/
// ********RoostGPT********
package com.baeldung.web.controller;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;
import org.junit.Before;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import com.baeldung.model.Book;
import com.baeldung.persistence.BookRepository;
import javax.persistence.EntityNotFoundException;
import com.baeldung.web.error.Checks;
import com.baeldung.web.resource.BookResource;
import com.baeldung.web.resource.CartResource;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import com.baeldung.model.Cart;
import com.baeldung.web.resource.NewBookResource;
import org.junit.experimental.categories.Category;

@Category({ Categories.addBookToCart.class, Categories.findByIsbn.class, Categories.toResource.class })
@RunWith(MockitoJUnitRunner.class)
public class CartControllerAddBookToCartTest {

	@Mock
	private BookRepository bookRepo;

	@InjectMocks
	private CartController cartController;

	private Book book;

	@Before
	public void setup() {
		book = new Book();
		book.setIsbn("1234567890");
	}

	@Test
	@Category(Categories.valid.class)
	public void testAddValidBookToCart() {
		BookResource bookResource = new BookResource(book);
		when(bookRepo.findByIsbn(book.getIsbn())).thenReturn(book);
		CartResource cartResource = cartController.addBookToCart(bookResource);
		assertEquals(1, cartResource.getBooks().size());
		assertEquals(book, cartResource.getBooks().get(0));
	}

	@Test(expected = EntityNotFoundException.class)
	@Category(Categories.invalid.class)
	public void testAddInvalidBookToCart() {
		BookResource bookResource = new BookResource(book);
		when(bookRepo.findByIsbn(book.getIsbn())).thenReturn(null);
		cartController.addBookToCart(bookResource);
	}

	@Test
	@Category(Categories.boundary.class)
	public void testAddBookToEmptyCart() {
		BookResource bookResource = new BookResource(book);
		when(bookRepo.findByIsbn(book.getIsbn())).thenReturn(book);
		CartResource cartResource = cartController.addBookToCart(bookResource);
		assertEquals(1, cartResource.getBooks().size());
		assertEquals(book, cartResource.getBooks().get(0));
	}

	@Test
	@Category(Categories.integration.class)
	public void testAddBookToNonEmptyCart() {
		BookResource bookResource = new BookResource(book);
		when(bookRepo.findByIsbn(book.getIsbn())).thenReturn(book);
		cartController.addBookToCart(bookResource);
		CartResource cartResource = cartController.addBookToCart(bookResource);
		assertEquals(2, cartResource.getBooks().size());
		assertEquals(book, cartResource.getBooks().get(0));
		assertEquals(book, cartResource.getBooks().get(1));
	}

}