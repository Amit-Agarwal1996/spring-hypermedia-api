// ********RoostGPT********
/*
Test generated by RoostGPT for test javaSpringtestCases using AI Type Open AI and AI Model gpt-4
ROOST_METHOD_HASH=create_997329f781
ROOST_METHOD_SIG_HASH=create_a73e82acf6
"""
Scenario 1: Successful creation of a new book
TestName: createNewBookSuccessfully
Description: This test is meant to check if a new book can be successfully created and saved in the repository.
Execution:
  Arrange: Mock the BookRepository's save method to accept any Book and return void.
  Act: Invoke the create method with a valid BookResource as parameter.
  Assert: Verify that the save method on the BookRepository is called once.
Validation:
  This assertion verifies that the book is saved in the repository. The expected result is that the save method on the repository is called once, indicating that the book creation process is successful. This test is significant in the context of ensuring that the application can create and save new books correctly.
Scenario 2: Creation of a book with null value
TestName: createBookWithNullValue
Description: This test is meant to check if the application can handle the creation of a book with a null value.
Execution:
  Arrange: Mock the BookRepository's save method to accept any Book and return void.
  Act: Invoke the create method with a null value as parameter.
  Assert: Expect an exception to be thrown.
Validation:
  This assertion verifies that the application can handle null values correctly when creating a new book. The expected result is an exception, which indicates that the application prevents null books from being created. This test is significant in the context of ensuring that the application can handle invalid input correctly.
Scenario 3: Creation of a book with an existing ISBN
TestName: createBookWithExistingIsbn
Description: This test is meant to check if the application can handle the creation of a book with an ISBN that already exists in the repository.
Execution:
  Arrange: Mock the BookRepository's save method to throw a DataIntegrityViolationException when a book with an existing ISBN is attempted to be saved.
  Act: Invoke the create method with a BookResource that has an ISBN which already exists in the repository.
  Assert: Expect a DataIntegrityViolationException to be thrown.
Validation:
  This assertion verifies that the application can handle the creation of a book with an existing ISBN correctly. The expected result is a DataIntegrityViolationException, which indicates that the application prevents books with duplicate ISBNs from being created. This test is significant in the context of ensuring that the application enforces the unique constraint on the ISBN field.
"""
*/
// ********RoostGPT********
package com.baeldung.web.controller;

import com.baeldung.model.Book;
import com.baeldung.persistence.BookRepository;
import com.baeldung.web.error.Checks;
import com.baeldung.web.resource.BookResource;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.dao.DataIntegrityViolationException;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.doThrow;
import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;
import static org.springframework.hateoas.mvc.ControllerLinkBuilder.methodOn;
import java.util.List;
import java.util.stream.Collectors;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import com.baeldung.model.BookView;
import com.fasterxml.jackson.annotation.JsonView;
import org.junit.experimental.categories.Category;

@Category({ Categories.create.class })
@RunWith(MockitoJUnitRunner.class)
public class BookControllerCreateTest {

	@Mock
	private BookRepository repo;

	@InjectMocks
	private BookController bookController;

	@Test
	@Category(Categories.valid.class)
	public void createNewBookSuccessfully() {
		BookResource newBookResource = new BookResource(new Book());
		bookController.create(newBookResource);
		verify(repo, times(1)).save(any(Book.class));
	}

	@Test(expected = IllegalArgumentException.class)
	@Category(Categories.invalid.class)
	public void createBookWithNullValue() {
		bookController.create(null);
	}

	@Test(expected = DataIntegrityViolationException.class)
	@Category(Categories.invalid.class)
	public void createBookWithExistingIsbn() {
		doThrow(DataIntegrityViolationException.class).when(repo).save(any(Book.class));
		BookResource newBookResource = new BookResource(new Book());
		bookController.create(newBookResource);
	}

}