// ********RoostGPT********
/*
Test generated by RoostGPT for test javaSpringtestCases using AI Type Open AI and AI Model gpt-4
ROOST_METHOD_HASH=findByIsbnFiltered_8b3376a021
ROOST_METHOD_SIG_HASH=findByIsbnFiltered_3bb19813ef
Scenario 1: Test findByIsbnFiltered with valid ISBN and fields
Details:
  TestName: findByIsbnFilteredValidData
  Description: This test is designed to verify that the findByIsbnFiltered method correctly retrieves the book with the specified ISBN and filters its properties based on the provided fields.
Execution:
  Arrange: Mock the repo.findByIsbn method to return a valid Book entity when given a valid ISBN as input. Also, mock the Checks.checkEntityExists method to return the same Book entity.
  Act: Invoke the findByIsbnFiltered method with a valid ISBN and fields.
  Assert: Assert that the returned MappingJacksonValue contains a NewBookResource with the expected filtered properties.
Validation:
  This assertion verifies that the method correctly retrieves and filters the book data. It is essential to ensure that the method functions as expected when provided with valid input.
Scenario 2: Test findByIsbnFiltered with invalid ISBN
Details:
  TestName: findByIsbnFilteredInvalidIsbn
  Description: This test is designed to verify that the findByIsbnFiltered method correctly handles the case where no book is found with the specified ISBN.
Execution:
  Arrange: Mock the repo.findByIsbn method to return null when given an invalid ISBN. Also, mock the Checks.checkEntityExists method to throw an exception in this case.
  Act: Invoke the findByIsbnFiltered method with an invalid ISBN and any fields.
  Assert: Assert that an exception is thrown.
Validation:
  This assertion verifies that the method correctly throws an exception when no book is found with the specified ISBN. This is important to prevent the method from returning incorrect data.
Scenario 3: Test findByIsbnFiltered with invalid fields
Details:
  TestName: findByIsbnFilteredInvalidFields
  Description: This test is designed to verify that the findByIsbnFiltered method correctly handles the case where the provided fields are not valid.
Execution:
  Arrange: Mock the repo.findByIsbn method to return a valid Book entity when given a valid ISBN. Also, mock the Checks.checkEntityExists method to return the same Book entity.
  Act: Invoke the findByIsbnFiltered method with a valid ISBN and invalid fields.
  Assert: Assert that the returned MappingJacksonValue contains a NewBookResource with no filtered properties.
Validation:
  This assertion verifies that the method correctly handles invalid fields. It is crucial to ensure that the method does not throw an exception or return incorrect data in this case.
*/
// ********RoostGPT********
package com.baeldung.web.controller;

import com.baeldung.model.Book;
import com.baeldung.persistence.BookRepository;
import com.baeldung.web.error.Checks;
import com.baeldung.web.resource.NewBookResource;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import org.mockito.Mockito;
import org.springframework.hateoas.mvc.ControllerLinkBuilder;
import org.springframework.http.converter.json.MappingJacksonValue;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;
import static org.springframework.hateoas.mvc.ControllerLinkBuilder.methodOn;
import java.util.List;
import java.util.stream.Collectors;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.baeldung.model.BookView;
import com.fasterxml.jackson.annotation.JsonView;
import org.junit.experimental.categories.Category;
import javax.persistence.EntityNotFoundException;

@Category({ Categories.findByIsbnFiltered.class, Categories.findByIsbn.class, Categories.addNewBookToCart.class })
public class NewBookControllerFindByIsbnFilteredTest {

	@Test
	@Category(Categories.valid.class)
	public void findByIsbnFilteredValidData() {
		// Arrange
		BookRepository mockRepo = Mockito.mock(BookRepository.class);
		Book mockBook = Mockito.mock(Book.class);
		when(mockRepo.findByIsbn("validIsbn")).thenReturn(mockBook);
		NewBookController controller = new NewBookController();
		// Act
		MappingJacksonValue result = controller.findByIsbnFiltered("title,author", "validIsbn");
		// Assert
		assertNotNull(result);
		assertEquals(NewBookResource.class, result.getValue().getClass());
		verify(mockRepo, times(1)).findByIsbn("validIsbn");
	}

	@Test(expected = EntityNotFoundException.class)
	@Category(Categories.invalid.class)
	public void findByIsbnFilteredInvalidIsbn() {
		// Arrange
		BookRepository mockRepo = Mockito.mock(BookRepository.class);
		when(mockRepo.findByIsbn("invalidIsbn")).thenReturn(null);
		NewBookController controller = new NewBookController();
		// Act
		controller.findByIsbnFiltered("title,author", "invalidIsbn");
	}

	@Test
	@Category(Categories.invalid.class)
	public void findByIsbnFilteredInvalidFields() {
		// Arrange
		BookRepository mockRepo = Mockito.mock(BookRepository.class);
		Book mockBook = Mockito.mock(Book.class);
		when(mockRepo.findByIsbn("validIsbn")).thenReturn(mockBook);
		NewBookController controller = new NewBookController();
		// Act
		MappingJacksonValue result = controller.findByIsbnFiltered("invalidField1,invalidField2", "validIsbn");
		// Assert
		assertNotNull(result);
		assertEquals(NewBookResource.class, result.getValue().getClass());
		verify(mockRepo, times(1)).findByIsbn("validIsbn");
	}

}