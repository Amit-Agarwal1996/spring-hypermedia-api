// ********RoostGPT********
/*
Test generated by RoostGPT for test javaSpringtestCases using AI Type Open AI and AI Model gpt-4
ROOST_METHOD_HASH=create_02f6f6d10a
ROOST_METHOD_SIG_HASH=create_e3117376ae
"""
Scenario 1: Test for successful book creation
Details:
  TestName: testSuccessfulBookCreation
  Description: This test checks if the create method is able to successfully create a new book and save it in the repository.
Execution:
  Arrange: Mock a NewBookResource object and a BookRepository object.
  Act: Call the create method with the mocked NewBookResource as parameter.
  Assert: Verify that the save method on the BookRepository object is invoked with the correct Book object.
Validation:
  The assertion verifies that the create method is able to save the new book in the repository. This is important to ensure that the application can add new books to the repository.
Scenario 2: Test for null book creation
Details:
  TestName: testNullBookCreation
  Description: This test checks if the create method is able to handle null input and does not attempt to save a null book in the repository.
Execution:
  Arrange: Mock a BookRepository object.
  Act: Call the create method with null as parameter.
  Assert: Verify that the save method on the BookRepository object is never invoked.
Validation:
  The assertion verifies that the create method does not attempt to save a null book, preventing Null Pointer Exceptions. This is crucial for the application's robustness and error handling.
Scenario 3: Test for book creation with existing ISBN
Details:
  TestName: testBookCreationWithExistingISBN
  Description: This test checks if the create method is able to handle a book with an ISBN that already exists in the repository.
Execution:
  Arrange: Mock a NewBookResource object with a book that has an ISBN already present in the repository, and a BookRepository object.
  Act: Call the create method with the mocked NewBookResource as parameter.
  Assert: Verify if any exception is thrown.
Validation:
  The assertion checks if the application can handle attempts to create a book with a duplicate ISBN. This is important to maintain the integrity of the data in the repository.
Scenario 4: Test for book creation with invalid ISBN
Details:
  TestName: testBookCreationWithInvalidISBN
  Description: This test checks if the create method is able to handle a book with an invalid ISBN.
Execution:
  Arrange: Mock a NewBookResource object with a book that has an invalid ISBN, and a BookRepository object.
  Act: Call the create method with the mocked NewBookResource as parameter.
  Assert: Verify if any exception is thrown.
Validation:
  The assertion checks if the application can handle attempts to create a book with an invalid ISBN. This is important to ensure that only books with valid ISBNs are added to the repository.
"""
*/
// ********RoostGPT********
package com.baeldung.web.controller;

import static org.mockito.Mockito.*;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.junit.experimental.categories.Category;
import com.baeldung.model.Book;
import com.baeldung.persistence.BookRepository;
import com.baeldung.web.error.Checks;
import com.baeldung.web.resource.NewBookResource;
import com.baeldung.web.controller.Categories;
import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;
import static org.springframework.hateoas.mvc.ControllerLinkBuilder.methodOn;
import java.util.List;
import java.util.stream.Collectors;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.converter.json.MappingJacksonValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.baeldung.model.BookView;
import com.fasterxml.jackson.annotation.JsonView;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import org.junit.experimental.categories.Category;

@Category({ Categories.create.class })
@RunWith(MockitoJUnitRunner.class)
public class NewBookControllerCreateTest {

	@InjectMocks
	private NewBookController newBookController;

	@Mock
	private BookRepository repo;

	@Mock
	private NewBookResource newBook;

	@Before
    public void setUp() {
        when(newBook.getBook()).thenReturn(new Book());
    }

	@Test
	@Category(Categories.valid.class)
	public void testSuccessfulBookCreation() {
		newBookController.create(newBook);
		verify(repo, times(1)).save(any(Book.class));
	}

	@Test
	@Category(Categories.invalid.class)
	public void testNullBookCreation() {
		newBookController.create(null);
		verify(repo, never()).save(any(Book.class));
	}

	@Test(expected = Exception.class)
    @Category(Categories.boundary.class)
    public void testBookCreationWithExistingISBN() {
        when(repo.findByIsbn(anyString())).thenReturn(new Book());
        newBookController.create(newBook);
    }

	@Test(expected = Exception.class)
    @Category(Categories.boundary.class)
    public void testBookCreationWithInvalidISBN() {
        when(newBook.getBook().getIsbn()).thenReturn("InvalidISBN");
        newBookController.create(newBook);
    }

}