// ********RoostGPT********
/*
Test generated by RoostGPT for test javaSpringtestCases using AI Type Open AI and AI Model gpt-4
ROOST_METHOD_HASH=findByIsbn_12217d1e40
ROOST_METHOD_SIG_HASH=findByIsbn_767974bf86
"""
Scenario 1: Test to ensure the findByIsbn method retrieves the correct book details based on ISBN
Details:
  TestName: findByIsbnRetrievesCorrectBookDetails.
  Description: This test is designed to verify that the findByIsbn method retrieves the correct book details based on the provided ISBN.
Execution:
  Arrange: Mock the findByIsbn method of the BookRepository to return a specific Book when called with a particular ISBN.
  Act: Call the findByIsbn method with the specific ISBN used in the Arrange step.
  Assert: Assert that the returned MappingJacksonValue contains the expected Book details.
Validation:
  The assertion verifies that the findByIsbn method correctly retrieves the details of the Book associated with the provided ISBN.
  This is essential as users need to be able to retrieve accurate book details based on an ISBN.
Scenario 2: Test to ensure the findByIsbn method throws an exception when no book is found for the provided ISBN
Details:
  TestName: findByIsbnThrowsExceptionWhenNoBookFound.
  Description: This test is designed to ensure the findByIsbn method throws an exception when no book is found for the provided ISBN.
Execution:
  Arrange: Mock the findByIsbn method of the BookRepository to return null when called with a particular ISBN.
  Act: Call the findByIsbn method with the specific ISBN used in the Arrange step.
  Assert: Assert that an exception is thrown.
Validation:
  The assertion verifies that the findByIsbn method throws an exception when no book is found for the provided ISBN.
  This is essential as it informs users when an invalid ISBN is used.
Scenario 3: Test to ensure the findByIsbn method correctly applies the "bookFilter" to the returned book details
Details:
  TestName: findByIsbnAppliesBookFilterCorrectly.
  Description: This test is designed to verify that the findByIsbn method correctly applies the "bookFilter" to the returned book details.
Execution:
  Arrange: Mock the findByIsbn method of the BookRepository to return a specific Book when called with a particular ISBN.
  Act: Call the findByIsbn method with the specific ISBN used in the Arrange step.
  Assert: Assert that the returned MappingJacksonValue has the "bookFilter" applied correctly.
Validation:
  The assertion verifies that the findByIsbn method correctly applies the "bookFilter" to the returned book details.
  This is essential as it ensures that only necessary book details are returned to users.
Scenario 4: Test to ensure the findByIsbn method correctly adds the "add-to-cart" link to the returned book details
Details:
  TestName: findByIsbnAddsAddToCartLinkCorrectly.
  Description: This test is designed to verify that the findByIsbn method correctly adds the "add-to-cart" link to the returned book details.
Execution:
  Arrange: Mock the findByIsbn method of the BookRepository to return a specific Book when called with a particular ISBN.
  Act: Call the findByIsbn method with the specific ISBN used in the Arrange step.
  Assert: Assert that the returned MappingJacksonValue contains the "add-to-cart" link.
Validation:
  The assertion verifies that the findByIsbn method correctly adds the "add-to-cart" link to the returned book details.
  This is essential as it provides users with a direct link to add the book to their cart.
"""
*/
// ********RoostGPT********
package com.baeldung.web.controller;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import org.springframework.hateoas.Link;
import org.springframework.http.converter.json.MappingJacksonValue;
import com.baeldung.model.Book;
import com.baeldung.persistence.BookRepository;
import com.baeldung.web.error.Checks;
import com.baeldung.web.error.EntityNotFoundException;
import com.baeldung.web.resource.NewBookResource;
import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;
import static org.springframework.hateoas.mvc.ControllerLinkBuilder.methodOn;
import java.util.List;
import java.util.stream.Collectors;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.baeldung.model.BookView;
import com.fasterxml.jackson.annotation.JsonView;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import org.junit.experimental.categories.Category;

@Category({ Categories.findByIsbn.class, Categories.addNewBookToCart.class })
public class NewBookControllerFindByIsbnTest {

	@Test
	@Category(Categories.valid.class)
	public void findByIsbnRetrievesCorrectBookDetails() {
		BookRepository mockRepo = mock(BookRepository.class);
		Book mockBook = mock(Book.class);
		when(mockRepo.findByIsbn("123")).thenReturn(mockBook);
		NewBookController controller = new NewBookController();
		controller.repo = mockRepo;
		MappingJacksonValue result = controller.findByIsbn("123");
		assertEquals(mockBook, ((NewBookResource) result.getValue()).getBook());
	}

	@Test(expected = EntityNotFoundException.class)
	@Category(Categories.invalid.class)
	public void findByIsbnThrowsExceptionWhenNoBookFound() {
		BookRepository mockRepo = mock(BookRepository.class);
		when(mockRepo.findByIsbn("123")).thenReturn(null);
		NewBookController controller = new NewBookController();
		controller.repo = mockRepo;
		controller.findByIsbn("123");
	}

	@Test
	@Category(Categories.valid.class)
	public void findByIsbnAppliesBookFilterCorrectly() {
		BookRepository mockRepo = mock(BookRepository.class);
		Book mockBook = mock(Book.class);
		when(mockRepo.findByIsbn("123")).thenReturn(mockBook);
		NewBookController controller = new NewBookController();
		controller.repo = mockRepo;
		MappingJacksonValue result = controller.findByIsbn("123");
		assertTrue(result.getFilters().findPropertyFilter("bookFilter", null) != null);
	}

	@Test
	@Category(Categories.valid.class)
	public void findByIsbnAddsAddToCartLinkCorrectly() {
		BookRepository mockRepo = mock(BookRepository.class);
		Book mockBook = mock(Book.class);
		when(mockRepo.findByIsbn("123")).thenReturn(mockBook);
		NewBookController controller = new NewBookController();
		controller.repo = mockRepo;
		MappingJacksonValue result = controller.findByIsbn("123");
		NewBookResource resource = (NewBookResource) result.getValue();
		Link link = resource.getLink("add-to-cart");
		assertTrue(link != null && link.getHref().contains("/cart/new"));
	}

}